---
layout: post
title:  "Laravel SQL debugging"
date:   2017-06-20 09:00:00 +1400
categories: laravel sql
tags: laravel

---

Laravel Eloquent ORM provides an easy to use database query builder but sometimes we would like to see what and how many SQL queries being triggered by our application.

![Sql queries jpg]({{ site.url }}/assets/images/sql_queries.jpg)

With the Eloquent Relationships we can easily walk into the N+1 problem. Just imagine we have a `Article`, `User`, `Comment` model (a user can comment on articles). On the article page we show all the comments with the owner's name in a `foreach` loop. It looks something like this with Eloquent and Blade:

{% highlight php %}
{% raw %}
@foreach ($article->comments as $comment)
    <div class="col-md-8 col-md-offset-2">
        <div class="panel panel-default">
            <div class="panel-heading">{{ $comment->owner->name }}</div>
        
            <div class="panel-body">
                {{ $comment->body }}
            </div>
        </div>
    </div>
@endforeach
{% endraw %}
{% endhighlight %}

Just to get all data we need one query to get the comments and N (count of comments) to get the owner's name. To solve this problem we can use eager loading (but this is an other story).

How can we check the queries generated by Laravel? We have more possibilities to do this.

## 1. var_dump the queries

One way is to check the queries on a page to `var_dump` it. The simplest way is to listening for query events in our route file:

{% highlight php %}
<?php
// routes/web.php

\DB::listen(function($query) {
    var_dump($query->sql);
});
{% endhighlight %}

## 2. log the queries

Sometimes we can't use the `var_dump` way (e.g. API call). This time we can write it to our `log` file. We need to register our query listener in the `AppServiceProvider`:

{% highlight php %}
<?php
// app/Providers/AppServiceProvider.php

public function boot()
{
    \DB::listen(function($query) { 
        \Log::info($query->sql, $query->bindings); 
        \Log::info($query->time); 
    });
}
{% endhighlight %}

## 3. Laravel Debugbar

Another option is to install [Laravel Debugbar](https://github.com/barryvdh/laravel-debugbar) package. On the queries tab we can check the queries of the actual page.




